'''
You are given a list of strings representing player_id, game_id, scores and city and a resultsPerPage number.
The results are sorted by scores in descendnig order. 
You need to display them so that on each page there are no duplicate player_id unless a page cannot be filled with only unique
player ids. Then the page is padded with remaining entries while preserving the score order. '' reprents end of page.
Example input:
resultsPerPage = 5
results = [
"1,28,300.6,San Francisco",
"4,5,209.1,San Francisco",
"20,7,203.4,Oakland",
"6,8,202.9,San Francisco",
"6,10,199.8,San Francisco",
"1,16,190.5,San Francisco",
"6,29,185.3,San Francisco",
"7,20,180.0,Oakland",
"6,21,162.2,San Francisco",
"2,18,161.7,San Jose",
"2,30,149.8,San Jose",
"3,76,146.7,San Francisco",
"2,14,141.8,San Jose"]

Example output:
['1,28,300.6,San Francisco', 
 '4,5,209.1,San Francisco', 
 '20,7,203.4,Oakland', 
 '6,8,202.9,San Francisco', 
 '7,20,180.0,Oakland', 
 '', 
 '6,10,199.8,San Francisco', 
 '1,16,190.5,San Francisco', 
 '2,18,161.7,San Jose', 
 '3,76,146.7,San Francisco', 
 '6,29,185.3,San Francisco', 
 '', 
 '6,21,162.2,San Francisco', 
 '2,30,149.8,San Jose', 
 '2,14,141.8,San Jose']
'''
def paginate(resultsPerPage, results):
    post_by_host, i, duplicates, res, curr = {}, 0, [], [], set()
    while results or duplicates:                
        d=[]
        while duplicates and i<5:
            tmp = heapq.heappop(duplicates)
            host_id = tmp[1][0].split(",")[0]
            curr.add(host_id)
            res.append(tmp[1].popleft())
            if tmp[1]:
                d.append(tmp)
            else:
                del post_by_host[host_id]
            i+=1
        for x in d:
            heapq.heappush(duplicates, x)
        while results and i<5:
            r = results.pop(0)
            host_id, list_id, score, address = r.split(",")
            if host_id not in curr:
                i+=1
                res.append(r)
                curr.add(host_id)
            else:
                if host_id in post_by_host:
                    post_by_host[host_id].append(r)
                else:
                    post_by_host[host_id]=deque()
                    post_by_host[host_id].append(r)
                    heapq.heappush(duplicates, (-float(score), post_by_host[host_id]))
        if i==5:
            i=0
            res.append("")
        curr=set()
    return res

resultsPerPage = 5
results = [
"1,28,300.6,San Francisco",
"4,5,209.1,San Francisco",
"20,7,203.4,Oakland",
"6,8,202.9,San Francisco",
"6,10,199.8,San Francisco",
"1,16,190.5,San Francisco",
"6,29,185.3,San Francisco",
"7,20,180.0,Oakland",
"6,21,162.2,San Francisco",
"2,18,161.7,San Jose",
"2,30,149.8,San Jose",
"3,76,146.7,San Francisco",
"2,14,141.8,San Jose"]
print(paginate(resultsPerPage, results))
